service: musket-api

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'stg'}
  region: ap-southeast-1
  environment:
    MUSKET_STORAGE_TABLE: musket-storage-${opt:stage, self:provider.stage}
    MUSKET_AUTH_TABLE: musket-auth-${opt:stage, self:provider.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.MUSKET_STORAGE_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.MUSKET_AUTH_TABLE}"

resources:
  Resources:
    AuthDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: operatorToken
            AttributeType: S
        KeySchema:
          -
            AttributeName: operatorToken
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.MUSKET_AUTH_TABLE}
    DocsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: customerId
            AttributeType: S
          -
            AttributeName: transactionTime
            AttributeType: N
        KeySchema:
          -
            AttributeName: customerId
            KeyType: HASH
          - AttributeName: transactionTime
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.MUSKET_STORAGE_TABLE}

functions:
  auth:
    handler: src/auth/get.handler
    events:
      - http:
          path: /auth
          method: get
          cors: true
  postAuthorisationToken:
    handler: src/auth/post.handler
    events:
      - http:
          path: /auth
          method: post
          cors: true
          authorizer: aws_iam
  getQuota: 
    handler: src/storage/get.handler
    events:
      - http:
          path: /quota/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
          cors: true
  buyMask:
    handler: src/storage/create.handler
    events:
      - http:
          path: /transactions/{id}
          method: post
          request:
            parameters:
              paths:
                id: true
          cors: true

custom:
  # Enable auto migration in local dynamodb on start
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
    stages:
      - ${self:provider.stage}


plugins:
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-offline
